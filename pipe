#!/bin/bash -e
#©Code by Solaris 2020
#blog:edges5352.github.io
#Email:bluebreeze191.gmail.com
#GitHub:EdgeS5352


#变量设定
export ver="2.9.2"
export mirrors="$PREFIX/etc/apt/sources.list"
export input="/dev/null"
export database="https://raw.githubusercontent.com/EdgeS5352/PickPipe/master/fast-up.sh"
export log="https://raw.githubusercontent.com/EdgeS5352/PickPipe/master/update.log"


#progress函数
function progress {
b=''
for ((i=0;$i<=100;i+=2))
do
  printf "   │%-50s│%d%%\r" $b $i
  sleep 0.6
  b="|$b"
done
}



if [ x"$1" = x ]; then #用户无输入时
  clear
  echo -e "\033[36m  ____  _      _      \033[0m"
  echo -e "\033[36m |  _ \(_) ___| | __  \033[0m"
  echo -e "\033[36m | |_) | |/ __| |/ /  \033[0m"
  echo -e "\033[36m |  __/| | (__|   <   \033[0m"
  echo -e "\033[36m |_|   |_|\___|_|\__) \033[0m"
  echo ""
  echo "Ver$ver  Code by Solaris"
  bash -c "$(curl -fsSL $log)"
  echo "尝试终端运行pipe h来获取更多"



elif [ $1 == d ]; then #安装
  if [ x"$2" = x ]; then
    echo -e "\033[31m X 请指定一个参数 \033[0m"
    exit 1
  else  
    echo "↻ 默认使用apt安装软件包"
    apt install $2 -y 1>"$input" 2>&1 | progress
  fi
   if [ $? == 100 ]; then
     echo -e "\033[41;37m │X│软件包$2不存在或未被当前软件源收录 \033[0m"
     exit 1
   elif [ $? == 2 ]; then
     echo -e "\033[41;37m │X│软件包$2已在之前被安装 \033[0m"
   elif [ "$?" == 0 -o "$?" == 1 ]; then
     echo -e "\033[47;30m │√│$2安装完成 \033[0m"
   else
    echo -e "\033[41;37m │X│遇到不明原因错误:$? \033[0m"
   fi
 


 elif [ $1 == r ]; then #移除
  if [ x"$2" = x ]; then
    echo -e "\033[31m X 请指定一个参数 \033[0m"
    exit 1
  else
    read -p "↹ 您确定要移除软件包$2吗? [Y/n] " ask
  fi
    if [ "$ask" == Y -o "$ask" == y ]; then
    echo "↻ 默认使用apt移除软件包"
    apt remove $2 -y 1>"$input" 2>&1 | progress
    if [ "$?" == 0 -o "$?" == 1 ]; then
      echo -e "\033[47;30m │√│移除完成 \033[0m"
    else
      echo -e "\033[41;37m │X│遇到不明原因错误:$? \033[0m"
    fi
  elif [ "$ask" == N -o "$ask" == n ]; then
    echo "❚❚终止"
    exit 0
  else 
    echo -e "\033[31m X 无效命令 \033[0m"
    exit 1
  fi



elif [ $1 == Uy ]; then #更新
  echo "↻ 默认使用apt更新软件包"
  apt update -y 1>"$input" 2>&1 | progress
  if [ $? == 0 ]; then
    echo -e "\033[47;30m │❚❚│已就绪 \033[0m"
  else  
    echo -e "\033[41;37m │X│遇到不明原因错误:$? \033[0m"
  fi



elif [ $1 == Ud ]; then #升级
  echo "↻ 默认使用apt升级软件包"
  apt upgrade -y 1>"$input" 2>&1 | progress
  if [ $? == 0 ]; then
    echo -e "\033[47;30m │√│升级完成 \033[0m"
  else
    echo -e "\033[41;37m │X│遇到不明原因错误:$? \033[0m"
  fi



elif [ $1 == s ]; then #搜索
  if [ x"$2" = x ]; then
    echo -e "\033[31m X 请指定一个参数 \033[0m"
    exit 1
  else
    apt search $2
  fi



elif [ $1 == h ]; then #帮助
  echo "PickPipe   ver$ver for termux"
  echo "Usage：pipe [命令] [参数]"
  echo ""
  echo "PickPipe意在将臃肿的apt包管理器进行简化"
  echo ""
  echo "命令:"
  echo "d    安装软件包"
  echo "r    移除软件包"
  echo "s    查找软件包"
  echo "h    命令及参数"
  echo "p    拉取新版包"
  echo "l    列出软件包"
  echo "Uy   更新软件包"
  echo "Ud   升级软件包"
  echo ""
  echo "当前主镜像源:"
  head -n 2 "$mirrors"



elif [ $1 == p ]; then #拉取
  echo -e "\033[32m ↻ 开始覆盖 \033[0m"
  bash -c "$(curl -fsSL $database)" 1>"$input" 2>&1 | progress



elif [ $1 == l ]; then #列出
  apt list



else #无效输入
  echo -e "\033[31m X 未被定义的命令，运行pipe h来获取帮助 \033[0m"
  exit 1
fi
